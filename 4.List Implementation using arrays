#include <stdio.h>

#define MAX_SIZE 100

// Define the structure for the list
struct List {
    int arr[MAX_SIZE];
    int size;
};

// Function to initialize the list
void initializeList(struct List *list) {
    list->size = 0;
}

// Function to insert an element at the end of the list
void insertElement(struct List *list, int value) {
    if (list->size < MAX_SIZE) {
        list->arr[list->size++] = value;
        printf("Element %d inserted successfully.\n", value);
    } else {
        printf("List is full. Cannot insert element %d.\n", value);
    }
}

// Function to delete an element from the list
void deleteElement(struct List *list, int value) {
    int i, found = 0;

    for (i = 0; i < list->size; ++i) {
        if (list->arr[i] == value) {
            found = 1;
            break;
        }
    }

    if (found) {
        // Shift elements to fill the gap
        for (int j = i; j < list->size - 1; ++j) {
            list->arr[j] = list->arr[j + 1];
        }

        // Decrement the size
        list->size--;

        printf("Element %d deleted successfully.\n", value);
    } else {
        printf("Element %d not found in the list.\n", value);
    }
}

// Function to display the elements of the list
void displayList(struct List *list) {
    if (list->size == 0) {
        printf("List is empty.\n");
    } else {
        printf("List elements: ");
        for (int i = 0; i < list->size; ++i) {
            printf("%d ", list->arr[i]);
        }
        printf("\n");
    }
}

int main() {
    struct List myList;
    initializeList(&myList);

    insertElement(&myList, 10);
    insertElement(&myList, 20);
    insertElement(&myList, 30);
    displayList(&myList);

    deleteElement(&myList, 20);
    displayList(&myList);

    return 0;
}
