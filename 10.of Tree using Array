#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Define the structure for the binary tree
struct BinaryTree {
    int arr[MAX_SIZE];
    int size;
};

// Function to initialize the binary tree
void initializeTree(struct BinaryTree* tree) {
    tree->size = 0;
}

// Function to check if the tree is empty
int isTreeEmpty(struct BinaryTree* tree) {
    return tree->size == 0;
}

// Function to insert a new node into the binary tree
void insertNode(struct BinaryTree* tree, int value) {
    if (tree->size < MAX_SIZE) {
        tree->arr[tree->size] = value;
        tree->size++;
        printf("Node with value %d inserted into the tree.\n", value);
    } else {
        printf("Tree is full. Cannot insert node with value %d.\n", value);
    }
}

// Function to display the binary tree
void displayTree(struct BinaryTree* tree) {
    if (isTreeEmpty(tree)) {
        printf("Tree is empty.\n");
    } else {
        printf("Binary Tree: ");
        for (int i = 0; i < tree->size; ++i) {
            printf("%d ", tree->arr[i]);
        }
        printf("\n");
    }
}

int main() {
    struct BinaryTree myTree;
    initializeTree(&myTree);

    insertNode(&myTree, 1);
    insertNode(&myTree, 2);
    insertNode(&myTree, 3);
    insertNode(&myTree, 4);
    insertNode(&myTree, 5);

    displayTree(&myTree);

    return 0;
}
