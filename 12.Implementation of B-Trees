#include <stdio.h>
#include <stdlib.h>

// Define the maximum number of keys in a node
#define MAX_KEYS 3

// Define the structure for a B-tree node
struct BTreeNode {
    int isLeaf;               // Indicates whether the node is a leaf
    int numKeys;              // Number of keys currently in the node
    int keys[MAX_KEYS];       // Array to store keys
    struct BTreeNode* children[MAX_KEYS + 1];  // Array to store child pointers
};

// Function to create a new B-tree node
struct BTreeNode* createNode() {
    struct BTreeNode* newNode = (struct BTreeNode*)malloc(sizeof(struct BTreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }

    newNode->isLeaf = 1;
    newNode->numKeys = 0;

    for (int i = 0; i < MAX_KEYS + 1; i++) {
        newNode->children[i] = NULL;
    }

    return newNode;
}

// Function to search for a key in the B-tree
int search(struct BTreeNode* root, int key) {
    int i = 0;
    while (i < root->numKeys && key > root->keys[i]) {
        i++;
    }

    if (i < root->numKeys && key == root->keys[i]) {
        return 1;  // Key found
    } else if (root->isLeaf) {
        return 0;  // Key not found
    } else {
        return search(root->children[i], key);
    }
}

// Function to split a full child of a node during insertion
void splitChild(struct BTreeNode* parent, int index, struct BTreeNode* child) {
    struct BTreeNode* newNode = createNode();
    newNode->isLeaf = child->isLeaf;
    newNode->numKeys = MAX_KEYS / 2 - 1;

    for (int j = 0; j < MAX_KEYS / 2 - 1; j++) {
        newNode->keys[j] = child->keys[j + MAX_KEYS / 2];
    }

    if (!child->isLeaf) {
        for (int j = 0; j < MAX_KEYS / 2; j++) {
            newNode->children[j] = child->children[j + MAX_KEYS / 2];
        }
    }

    child->numKeys = MAX_KEYS / 2 - 1;

    for (int j = parent->numKeys; j > index; j--) {
        parent->children[j + 1] = parent->children[j];
    }

    parent->children[index + 1] = newNode;

    for (int j = parent->numKeys - 1; j >= index; j--) {
        parent->keys[j + 1] = parent->keys[j];
    }

    parent->keys[index] = child->keys[MAX_KEYS / 2 - 1];
    parent->numKeys++;
}

// Function to insert a key into the B-tree
struct BTreeNode* insert(struct BTreeNode* root, int key) {
    if (root == NULL) {
        struct BTreeNode* newNode = createNode();
        newNode->keys[0] = key;
        newNode->numKeys = 1;
        return newNode;
    }

    if (root->numKeys == MAX_KEYS) {
        struct BTreeNode* newRoot = createNode();
        newRoot->isLeaf = 0;
        newRoot->children[0] = root;
        splitChild(newRoot, 0, root);
        root = newRoot;
    }

    int i = root->numKeys - 1;

    if (root->isLeaf) {
        while (i >= 0 && key < root->keys[i]) {
            root->keys[i + 1] = root->keys[i];
            i--;
        }

        root->keys[i + 1] = key;
        root->numKeys++;
    } else {
        while (i >= 0 && key < root->keys[i]) {
            i--;
        }

        i++;

        if (root->children[i]->numKeys == MAX_KEYS) {
            splitChild(root, i, root->children[i]);

            if (key > root->keys[i]) {
                i++;
            }
        }

        root->children[i] = insert(root->children[i], key);
    }

    return root;
}

// Function to perform an inorder traversal of the B-tree
void inorderTraversal(struct BTreeNode* root) {
    if (root != NULL) {
        for (int i = 0; i < root->numKeys; i++) {
            inorderTraversal(root->children[i]);
            printf("%d ", root->keys[i]);
        }
        inorderTraversal(root->children[root->numKeys]);
    }
}

// Function to free the memory allocated for the B-tree
void freeBTree(struct BTreeNode* root) {
    if (root != NULL) {
        for (int i = 0; i <= root->numKeys; i++) {
            freeBTree(root->children[i]);
        }
        free(root);
    }
}

int main() {
    struct BTreeNode* root = NULL;

    // Insert values into the B-tree
    root = insert(root, 3);
    root = insert(root, 7);
    root = insert(root, 2);
    root = insert(root, 6);
    root = insert(root, 1);
    root = insert(root, 4);
    root = insert(root, 5);

    printf("Inorder Traversal of B-tree: ");
    inorderTraversal(root);
    printf("\n");

    // Search for a key in the B-tree
    int keyToSearch = 6;
    if (search(root, keyToSearch)) {
        printf("%d found in the B-tree.\n", keyToSearch);
    } else {
        printf("%d not found in the B-tree.\n", keyToSearch);
    }

    // Free the memory allocated for the B-tree
    freeBTree(root);

    return 0;
}
