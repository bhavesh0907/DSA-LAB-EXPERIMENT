#include <stdio.h>
#include <stdlib.h>

// Function to allocate memory for a matrix
int **allocateMatrix(int rows, int cols) {
    int **matrix = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; ++i) {
        matrix[i] = (int *)malloc(cols * sizeof(int));
    }
    return matrix;
}

// Function to free memory allocated for a matrix
void freeMatrix(int **matrix, int rows) {
    for (int i = 0; i < rows; ++i) {
        free(matrix[i]);
    }
    free(matrix);
}

// Function to perform matrix multiplication
int **multiplyMatrices(int **mat1, int rows1, int cols1, int **mat2, int rows2, int cols2) {
    if (cols1 != rows2) {
        printf("Matrix multiplication not possible\n");
        return NULL;
    }

    int **result = allocateMatrix(rows1, cols2);

    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols2; ++j) {
            result[i][j] = 0;
            for (int k = 0; k < cols1; ++k) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    return result;
}

// Function to display a matrix
void displayMatrix(int **matrix, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int rows1, cols1, rows2, cols2;

    // Get dimensions for the first matrix
    printf("Enter dimensions for the first matrix (rows columns): ");
    scanf("%d %d", &rows1, &cols1);

    // Allocate memory for the first matrix
    int **matrix1 = allocateMatrix(rows1, cols1);

    // Get elements for the first matrix
    printf("Enter elements for the first matrix:\n");
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols1; ++j) {
            scanf("%d", &matrix1[i][j]);
        }
    }

    // Get dimensions for the second matrix
    printf("Enter dimensions for the second matrix (rows columns): ");
    scanf("%d %d", &rows2, &cols2);

    // Allocate memory for the second matrix
    int **matrix2 = allocateMatrix(rows2, cols2);

    // Get elements for the second matrix
    printf("Enter elements for the second matrix:\n");
    for (int i = 0; i < rows2; ++i) {
        for (int j = 0; j < cols2; ++j) {
            scanf("%d", &matrix2[i][j]);
        }
    }

    // Perform matrix multiplication
    int **resultMatrix = multiplyMatrices(matrix1, rows1, cols1, matrix2, rows2, cols2);

    if (resultMatrix != NULL) {
        // Display the result
        printf("Result of matrix multiplication:\n");
        displayMatrix(resultMatrix, rows1, cols2);

        // Free allocated memory
        freeMatrix(matrix1, rows1);
        freeMatrix(matrix2, rows2);
        freeMatrix(resultMatrix, rows1);
    }

    return 0;
}
